// SPDX-FileCopyrightText: 2022 Cem Ge√ßgel <gecgelcem@outlook.com>
// SPDX-License-Identifier: GPL-3.0-or-later

// Token File Rules:
// * Comments using `//`.
// * Every line has single pattern definition. Pattern definitions can span
// multiple lines but a continuation line should not have a new pattern
// definition in the end.
// * Template patterns using `<>`. These are done using text substitution. An
// extra group is added around the templates to not get weird results.
// * A set of pattern names at the end that gives the order of the tokens. Some
// of the patterns that are not supposed to be tokens can be skiped here. The
// tokenizer will try to match from the first pattern in the set and will try
// the next one if the maching fails. If all patterns in the set do not match
// the lexer aborts with an error.
// * Do not define a pattern with name eof, it is the end of file token that is
// added by the lexer to the end of the token list.

// Numeric Literals

num<dgt>        = +dgt *{'_' +dgt}
int<dgt>        = '+'|'-' num<dgt>
float<dgt, exp> = int<dgt> '.' num<dgt> ?{exp int<'0~9'>}

bin_int   = '0' {'b'|'B'} int<'0~1'>
bin_float = '0' {'b'|'B'} float<'0~1', 'p'|'P'>

oct_int   = '0' {'o'|'O'} int<'0~7'>
oct_float = '0' {'o'|'O'} float<'0~7', 'p'|'P'>

dec_int   = int<'0~9'>
dec_float = float<'0~9', 'e'|'E'>

hex_dgt<> = '0~9' | 'A~F' | 'a~f'
hex_int   = '0' {'x'|'X'} int<hex_dgt<>>
hex_float = '0' {'x'|'X'} float<hex_dgt<>, 'p'|'P'>

// Tokens

[
    bin_int, oct_int, dec_int, hex_int,
    bin_float, oct_float, dec_float, hex_float,
]
